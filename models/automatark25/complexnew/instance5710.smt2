(declare-const X String)
; EMA|QCY|SQZ|ORM|NQT|WTN|CBG|QFO|BEQ|LKZ|LTN|KNF|MHZ|NWI|CLF|QUY|SEN|STN|BEQ|BQH|LHR|NHT|LCY|MME|NCL|BWF|BLK|CAX|LPL|MAN|BBP|BEX|BZZ|LGW|SOU|FAB|OXF|ESH|QLA|LYX|KRH|ODH|RCS|QUC|BBS|GLO|EXT|FFD|BOH|LYE|NQY|LEQ|ISC|UPV|BRS|YEO|CVT|BHX|DSA|HUY|LBA|HRT|BFS|BHD|LDY|ENK|ABZ|OBN|BEB|BRR|CAL|COL|CSA|NRL|INV|SCS|DND|LSI|EOI|EDI|FIE|FOA|ILY|FSS|NDY|ADX|LMO|OUK|PSV|PPW|PIK|GLA|KOI|PSL|SYY|SKL|SOY|LWK|TRE|WRY|WHS|WIC|HAW|CEG|VLY|SWS|CWL|DGX|ACI|GCI|IOM|JER
(assert (str.in_re X (re.union (str.to_re "EMA") (str.to_re "QCY") (str.to_re "SQZ") (str.to_re "ORM") (str.to_re "NQT") (str.to_re "WTN") (str.to_re "CBG") (str.to_re "QFO") (str.to_re "BEQ") (str.to_re "LKZ") (str.to_re "LTN") (str.to_re "KNF") (str.to_re "MHZ") (str.to_re "NWI") (str.to_re "CLF") (str.to_re "QUY") (str.to_re "SEN") (str.to_re "STN") (str.to_re "BEQ") (str.to_re "BQH") (str.to_re "LHR") (str.to_re "NHT") (str.to_re "LCY") (str.to_re "MME") (str.to_re "NCL") (str.to_re "BWF") (str.to_re "BLK") (str.to_re "CAX") (str.to_re "LPL") (str.to_re "MAN") (str.to_re "BBP") (str.to_re "BEX") (str.to_re "BZZ") (str.to_re "LGW") (str.to_re "SOU") (str.to_re "FAB") (str.to_re "OXF") (str.to_re "ESH") (str.to_re "QLA") (str.to_re "LYX") (str.to_re "KRH") (str.to_re "ODH") (str.to_re "RCS") (str.to_re "QUC") (str.to_re "BBS") (str.to_re "GLO") (str.to_re "EXT") (str.to_re "FFD") (str.to_re "BOH") (str.to_re "LYE") (str.to_re "NQY") (str.to_re "LEQ") (str.to_re "ISC") (str.to_re "UPV") (str.to_re "BRS") (str.to_re "YEO") (str.to_re "CVT") (str.to_re "BHX") (str.to_re "DSA") (str.to_re "HUY") (str.to_re "LBA") (str.to_re "HRT") (str.to_re "BFS") (str.to_re "BHD") (str.to_re "LDY") (str.to_re "ENK") (str.to_re "ABZ") (str.to_re "OBN") (str.to_re "BEB") (str.to_re "BRR") (str.to_re "CAL") (str.to_re "COL") (str.to_re "CSA") (str.to_re "NRL") (str.to_re "INV") (str.to_re "SCS") (str.to_re "DND") (str.to_re "LSI") (str.to_re "EOI") (str.to_re "EDI") (str.to_re "FIE") (str.to_re "FOA") (str.to_re "ILY") (str.to_re "FSS") (str.to_re "NDY") (str.to_re "ADX") (str.to_re "LMO") (str.to_re "OUK") (str.to_re "PSV") (str.to_re "PPW") (str.to_re "PIK") (str.to_re "GLA") (str.to_re "KOI") (str.to_re "PSL") (str.to_re "SYY") (str.to_re "SKL") (str.to_re "SOY") (str.to_re "LWK") (str.to_re "TRE") (str.to_re "WRY") (str.to_re "WHS") (str.to_re "WIC") (str.to_re "HAW") (str.to_re "CEG") (str.to_re "VLY") (str.to_re "SWS") (str.to_re "CWL") (str.to_re "DGX") (str.to_re "ACI") (str.to_re "GCI") (str.to_re "IOM") (str.to_re "JER\u{a}"))))
; ^((A(((H[MX])|(M(P|SN))|(X((D[ACH])|(M[DS]))?)))?)|(K7(A)?)|(D(H[DLM])?))(\d{3,4})[ABD-G][CHJK-NPQT-Y][Q-TV][1-4][B-E]$
(assert (str.in_re X (re.++ (re.union (re.++ (str.to_re "A") (re.opt (re.union (re.++ (str.to_re "H") (re.union (str.to_re "M") (str.to_re "X"))) (re.++ (str.to_re "M") (re.union (str.to_re "P") (str.to_re "SN"))) (re.++ (str.to_re "X") (re.opt (re.union (re.++ (str.to_re "D") (re.union (str.to_re "A") (str.to_re "C") (str.to_re "H"))) (re.++ (str.to_re "M") (re.union (str.to_re "D") (str.to_re "S"))))))))) (re.++ (str.to_re "K7") (re.opt (str.to_re "A"))) (re.++ (str.to_re "D") (re.opt (re.++ (str.to_re "H") (re.union (str.to_re "D") (str.to_re "L") (str.to_re "M")))))) ((_ re.loop 3 4) (re.range "0" "9")) (re.union (str.to_re "A") (str.to_re "B") (re.range "D" "G")) (re.union (str.to_re "C") (str.to_re "H") (str.to_re "J") (re.range "K" "N") (str.to_re "P") (str.to_re "Q") (re.range "T" "Y")) (re.union (re.range "Q" "T") (str.to_re "V")) (re.range "1" "4") (re.range "B" "E") (str.to_re "\u{a}"))))
; CUSTOM\swww\u{2E}locators\u{2E}comas\u{2E}starware\u{2E}com
(assert (str.in_re X (re.++ (str.to_re "CUSTOM") (re.union (str.to_re " ") (str.to_re "\u{9}") (str.to_re "\u{a}") (str.to_re "\u{c}") (str.to_re "\u{d}")) (str.to_re "www.locators.comas.starware.com\u{a}"))))
; -[0-9]*[x][0-9]*
(assert (not (str.in_re X (re.++ (str.to_re "-") (re.* (re.range "0" "9")) (str.to_re "x") (re.* (re.range "0" "9")) (str.to_re "\u{a}")))))
; ^([A-Z\d]{3})[A-Z]{2}\d{2}([A-Z\d]{1})([X\d]{1})([A-Z\d]{3})\d{5}$
(assert (str.in_re X (re.++ ((_ re.loop 3 3) (re.union (re.range "A" "Z") (re.range "0" "9"))) ((_ re.loop 2 2) (re.range "A" "Z")) ((_ re.loop 2 2) (re.range "0" "9")) ((_ re.loop 1 1) (re.union (re.range "A" "Z") (re.range "0" "9"))) ((_ re.loop 1 1) (re.union (str.to_re "X") (re.range "0" "9"))) ((_ re.loop 3 3) (re.union (re.range "A" "Z") (re.range "0" "9"))) ((_ re.loop 5 5) (re.range "0" "9")) (str.to_re "\u{a}"))))
(check-sat)

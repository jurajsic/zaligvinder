(set-logic QF_SLIA)
(declare-const X String)
; (^([A-Za-z])([-_.\dA-Za-z]{1,10})([\dA-Za-z]{1}))(@)(([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})|(([\dA-Za-z{1}][-_.\dA-Za-z]{1,25})\.([A-Za-z]{2,4}))$)
(assert (not (str.in_re X (re.++ (str.to_re "@") (re.union (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (str.to_re ".") ((_ re.loop 1 3) (re.range "0" "9")) (str.to_re ".") ((_ re.loop 1 3) (re.range "0" "9")) (str.to_re ".") ((_ re.loop 1 3) (re.range "0" "9"))) (re.++ (str.to_re ".") ((_ re.loop 2 4) (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.union (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z") (str.to_re "{") (str.to_re "1") (str.to_re "}")) ((_ re.loop 1 25) (re.union (str.to_re "-") (str.to_re "_") (str.to_re ".") (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z"))))) (str.to_re "\u{a}") (re.union (re.range "A" "Z") (re.range "a" "z")) ((_ re.loop 1 10) (re.union (str.to_re "-") (str.to_re "_") (str.to_re ".") (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z"))) ((_ re.loop 1 1) (re.union (re.range "0" "9") (re.range "A" "Z") (re.range "a" "z")))))))
; User-Agent\u{3A}User-Agent\u{3a}URLencoderthis\u{7C}Connected
(assert (str.in_re X (str.to_re "User-Agent:User-Agent:URLencoderthis|Connected\u{a}")))
; /^\/load\.php\?spl=[^&]+&b=[^&]+&o=[^&]+&i=/U
(assert (not (str.in_re X (re.++ (str.to_re "//load.php?spl=") (re.+ (re.comp (str.to_re "&"))) (str.to_re "&b=") (re.+ (re.comp (str.to_re "&"))) (str.to_re "&o=") (re.+ (re.comp (str.to_re "&"))) (str.to_re "&i=/U\u{a}")))))
; \d+\s*[.'-]\s*\d+\s*[\d+.m\"]*
(assert (str.in_re X (re.++ (re.+ (re.range "0" "9")) (re.* (re.union (str.to_re " ") (str.to_re "\u{9}") (str.to_re "\u{a}") (str.to_re "\u{c}") (str.to_re "\u{d}"))) (re.union (str.to_re ".") (str.to_re "'") (str.to_re "-")) (re.* (re.union (str.to_re " ") (str.to_re "\u{9}") (str.to_re "\u{a}") (str.to_re "\u{c}") (str.to_re "\u{d}"))) (re.+ (re.range "0" "9")) (re.* (re.union (str.to_re " ") (str.to_re "\u{9}") (str.to_re "\u{a}") (str.to_re "\u{c}") (str.to_re "\u{d}"))) (re.* (re.union (re.range "0" "9") (str.to_re "+") (str.to_re ".") (str.to_re "m") (str.to_re "\u{22}"))) (str.to_re "\u{a}"))))
; [du]{2}|[gu]{2}|[tu]{2}|[ds]{2}|[gs]{2}|[da]{2}|[ga]{2}|[ta]{2}|[dq]{2}|[gq]{2}|[tq]{2}|[DU]{2}|[GU]{2}|[TU]{2}|[DS]{2}|[GS]{2}|[DA]{2}|[GA]{2}|[TA]{2}|[DQ]{2}|[GQ]{2}|[TQ]{2}
(assert (not (str.in_re X (re.union ((_ re.loop 2 2) (re.union (str.to_re "d") (str.to_re "u"))) ((_ re.loop 2 2) (re.union (str.to_re "g") (str.to_re "u"))) ((_ re.loop 2 2) (re.union (str.to_re "t") (str.to_re "u"))) ((_ re.loop 2 2) (re.union (str.to_re "d") (str.to_re "s"))) ((_ re.loop 2 2) (re.union (str.to_re "g") (str.to_re "s"))) ((_ re.loop 2 2) (re.union (str.to_re "d") (str.to_re "a"))) ((_ re.loop 2 2) (re.union (str.to_re "g") (str.to_re "a"))) ((_ re.loop 2 2) (re.union (str.to_re "t") (str.to_re "a"))) ((_ re.loop 2 2) (re.union (str.to_re "d") (str.to_re "q"))) ((_ re.loop 2 2) (re.union (str.to_re "g") (str.to_re "q"))) ((_ re.loop 2 2) (re.union (str.to_re "t") (str.to_re "q"))) ((_ re.loop 2 2) (re.union (str.to_re "D") (str.to_re "U"))) ((_ re.loop 2 2) (re.union (str.to_re "G") (str.to_re "U"))) ((_ re.loop 2 2) (re.union (str.to_re "T") (str.to_re "U"))) ((_ re.loop 2 2) (re.union (str.to_re "D") (str.to_re "S"))) ((_ re.loop 2 2) (re.union (str.to_re "G") (str.to_re "S"))) ((_ re.loop 2 2) (re.union (str.to_re "D") (str.to_re "A"))) ((_ re.loop 2 2) (re.union (str.to_re "G") (str.to_re "A"))) ((_ re.loop 2 2) (re.union (str.to_re "T") (str.to_re "A"))) ((_ re.loop 2 2) (re.union (str.to_re "D") (str.to_re "Q"))) ((_ re.loop 2 2) (re.union (str.to_re "G") (str.to_re "Q"))) (re.++ ((_ re.loop 2 2) (re.union (str.to_re "T") (str.to_re "Q"))) (str.to_re "\u{a}"))))))
(check-sat)

(declare-const X String)
; (\\d{1}-\\d{2}\\s*)(of +)(\\s?\\d{5})|(\\d{1}-\\d{2}\\s*)(of +)(\\s?\\d{4})|(\\d{1}-\\d{2}\\s*)(of +)(\\s?\\d{3})|(\\d{1}-\\d{2}\\s*)(of +)(\\s?\\d{2})|(\\d{1}-\\d{2}\\s*)(of +)(\\s?\\d{1})
(assert (not (str.in_re X (re.union (re.++ (str.to_re "\u{5c}") ((_ re.loop 1 1) (str.to_re "d")) (str.to_re "-\u{5c}") ((_ re.loop 2 2) (str.to_re "d")) (str.to_re "\u{5c}") (re.* (str.to_re "s")) (str.to_re "of") (re.+ (str.to_re " ")) (str.to_re "\u{5c}") (re.opt (str.to_re "s")) (str.to_re "\u{5c}") ((_ re.loop 5 5) (str.to_re "d"))) (re.++ (str.to_re "\u{5c}") ((_ re.loop 1 1) (str.to_re "d")) (str.to_re "-\u{5c}") ((_ re.loop 2 2) (str.to_re "d")) (str.to_re "\u{5c}") (re.* (str.to_re "s")) (str.to_re "of") (re.+ (str.to_re " ")) (str.to_re "\u{5c}") (re.opt (str.to_re "s")) (str.to_re "\u{5c}") ((_ re.loop 4 4) (str.to_re "d"))) (re.++ (str.to_re "\u{5c}") ((_ re.loop 1 1) (str.to_re "d")) (str.to_re "-\u{5c}") ((_ re.loop 2 2) (str.to_re "d")) (str.to_re "\u{5c}") (re.* (str.to_re "s")) (str.to_re "of") (re.+ (str.to_re " ")) (str.to_re "\u{5c}") (re.opt (str.to_re "s")) (str.to_re "\u{5c}") ((_ re.loop 3 3) (str.to_re "d"))) (re.++ (str.to_re "\u{5c}") ((_ re.loop 1 1) (str.to_re "d")) (str.to_re "-\u{5c}") ((_ re.loop 2 2) (str.to_re "d")) (str.to_re "\u{5c}") (re.* (str.to_re "s")) (str.to_re "of") (re.+ (str.to_re " ")) (str.to_re "\u{5c}") (re.opt (str.to_re "s")) (str.to_re "\u{5c}") ((_ re.loop 2 2) (str.to_re "d"))) (re.++ (str.to_re "\u{a}\u{5c}") ((_ re.loop 1 1) (str.to_re "d")) (str.to_re "-\u{5c}") ((_ re.loop 2 2) (str.to_re "d")) (str.to_re "\u{5c}") (re.* (str.to_re "s")) (str.to_re "of") (re.+ (str.to_re " ")) (str.to_re "\u{5c}") (re.opt (str.to_re "s")) (str.to_re "\u{5c}") ((_ re.loop 1 1) (str.to_re "d")))))))
(check-sat)

(set-logic QF_SLIA)


(declare-fun var1 () String)
(declare-fun var3 () String)
(declare-fun var4 () String)
(declare-fun var6 () String)
(declare-fun var7 () String)
(declare-fun var8 () String)
(declare-fun var10 () String)
(declare-fun var11 () Int)
(declare-fun var12 () String)
(declare-fun var14 () String)
(declare-fun var15 () Int)
(declare-fun var16 () String)
(declare-fun var18 () String)
(declare-fun var19 () String)
(declare-fun var20 () String)
(declare-fun var22 () String)
(declare-fun var23 () String)
(declare-fun var25 () String)
(declare-fun var26 () Int)
(declare-fun var27 () String)
(declare-fun var29 () String)
(declare-fun var31 () String)
(declare-fun var33 () String)
(declare-fun var37 () Int)
(declare-fun var40 () String)
(declare-fun var41 () String)
(declare-fun var42 () String)
(declare-fun var44 () String)
(declare-fun var45 () String)
(declare-fun var47 () String)
(declare-fun var48 () String)
(declare-fun var50 () String)
(declare-fun var52 () String)
(declare-fun var56 () String)
(declare-fun var57 () Int)
(declare-fun var55 () String)
(declare-fun sv1 () String)
(declare-fun sv2 () String)

(assert (= true (= sv1 sv2 ) ))
(assert (= true (str.in_re var55 (re.++ (re.++ (re.++  (re.++ (re.* re.allchar ) (re.++  (str.to_re "'") (re.++ (re.+  (str.to_re " ") ) (re.++  (re.union  (str.to_re "O")  (str.to_re "o")) (re.++  (re.union  (str.to_re "R")  (str.to_re "r")) (re.++ (re.+  (str.to_re " ") )  (str.to_re "'"))))))) (str.to_re sv1) ) (re.++  (re.++  (str.to_re "'") (re.++ (re.* re.allchar ) (re.++  (str.to_re "=") (re.++ (re.* re.allchar )  (str.to_re "'"))))) (str.to_re sv2) ) )  (re.++  (str.to_re "'") (re.++ (re.*  (str.to_re " ") )  (re.union  (re.++  (str.to_re "\u{2d}")  (str.to_re "\u{2d}"))  (str.to_re "\u{23}")))) ) ) ))
(assert (= true (= var3 var1 ) ))
(assert (= true (= (str.++ var4 "'" ) var3 ) ))
(assert (= true (= (str.++ var6 var7 ) var4 ) ))
(assert (= true (= (str.++ var8 "AND s_w_id = '" ) var6 ) ))
(assert (= true (= (str.++ var10 (str.from_int var11 ) ) var8 ) ))
(assert (= true (= (str.++ var12 "AND ol_o_id \u{3e}=" ) var10 ) ))
(assert (= true (= (str.++ var14 (str.from_int var15 ) ) var12 ) ))
(assert (= true (= (str.++ var16 "' AND ol_o_id \u{3c}" ) var14 ) ))
(assert (= true (= (str.++ var18 var19 ) var16 ) ))
(assert (= true (= (str.++ var20 "' AND ol_d_id = '" ) var18 ) ))
(assert (= true (= (str.++ var22 var7 ) var20 ) ))
(assert (= true (= (str.++ var23 "AND ol_w_id = '" ) var22 ) ))
(assert (= true (= (str.++ var25 (str.from_int var26 ) ) var23 ) ))
(assert (= true (= (str.++ var27 "AND s_quantity \u{3c}" ) var25 ) ))
(assert (= true (= (str.++ var29 "WHERE s_i_id = ol_i_id" ) var27 ) ))
(assert (= true (= (str.++ var31 "FROM tpcc_order_line, tpcc_stock" ) var29 ) ))
(assert (= true (= (str.++ var33 "SELECT COUNT\u{28}DISTINCT \u{28}s_i_id\u{29}\u{29} AS stock_count" ) var31 ) ))
(assert (= true (not (= 0 var37 )) ))
(assert (= true (= var41 var40 ) ))
(assert (= true (= (str.++ var42 "'" ) var41 ) ))
(assert (= true (= (str.++ var44 var19 ) var42 ) ))
(assert (= true (= (str.++ var45 "' AND d_id = '" ) var44 ) ))
(assert (= true (= (str.++ var47 var7 ) var45 ) ))
(assert (= true (= (str.++ var48 "WHERE d_w_id = '" ) var47 ) ))
(assert (= true (= (str.++ var50 "FROM tpcc_district" ) var48 ) ))
(assert (= true (= (str.++ var52 "SELECT d_next_o_id" ) var50 ) ))
(assert (= true (= var19 var56 ) ))
(assert (= true (= var26 var57 ) ))
(assert (= true (= var7 var55 ) ))

(check-sat)

(set-logic QF_SLIA)

(declare-fun var1679 () Int)
(declare-fun var1680 () Int)
(declare-fun var1681 () Int)
(declare-fun var1684 () String)
(declare-fun var1685 () Int)
(declare-fun var1689 () String)
(declare-fun var1690 () String)
(declare-fun var1691 () String)
(declare-fun var1692 () String)
(declare-fun var1693 () String)
(declare-fun var1695 () String)
(declare-fun var1696 () String)
(declare-fun var1697 () String)
(declare-fun sv1 () String)
(declare-fun sv2 () String)
(declare-fun kv1 () String)
(declare-fun kv2 () String)
(assert (= sv1 sv2 ) )
(assert (= kv1 kv2 ) )
(assert (str.in_re var1684 (re.++ (re.++ (re.++  (re.++ (re.* re.allchar ) (re.++  (str.to_re "\u{27}") (re.++ (re.+  (str.to_re "\u{20}") ) (re.++  (re.union  (str.to_re "\u{4f}")  (str.to_re "\u{6f}")) (re.++  (re.union  (str.to_re "\u{52}")  (str.to_re "\u{72}")) (re.++ (re.+  (str.to_re "\u{20}") )  (str.to_re "\u{27}"))))))) (str.to_re sv1) ) (re.++  (re.++  (str.to_re "\u{27}") (re.++ (re.* re.allchar ) (re.++  (str.to_re "\u{3d}") (re.++ (re.* re.allchar )  (str.to_re "\u{27}"))))) (str.to_re sv2) ) )  (re.++  (str.to_re "\u{27}") (re.++ (re.*  (str.to_re "\u{20}") )  (re.union  (re.++  (str.to_re "\u{5c}\u{2d}")  (str.to_re "\u{5c}\u{2d}"))  (str.to_re "\u{23}")))) ) ) )
(assert (= (- 1) (str.to_int kv1)))
(assert (= (str.from_int (- 1)) kv1))
(assert (= (str.len kv2) (- (str.len var1684) 4)))
(check-sat)


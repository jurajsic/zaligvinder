(set-logic ALL)
(set-option :produce-models true)

(declare-fun var21 () String)
(declare-fun var22 () String)
(declare-fun var23 () String)
(declare-fun var25 () String)
(declare-fun var26 () String)
(declare-fun var27 () String)
(declare-fun var29 () String)
(declare-fun var30 () String)
(declare-fun var32 () Int)
(declare-fun sv1 () String)
(declare-fun sv2 () String)

(assert (= true (= sv1 sv2 ) ))
(assert (= true (str.in_re var26 (re.++ (re.++  (re.++ (re.* re.allchar ) (re.++  (str.to_re "'") (re.++ (re.+  (str.to_re " ") ) (re.++  (re.union  (str.to_re "O")  (str.to_re "o")) (re.++  (re.union  (str.to_re "R")  (str.to_re "r")) (re.++ (re.+  (str.to_re " ") )  (str.to_re "'"))))))) (str.to_re sv1) ) (re.++  (re.++  (str.to_re "'") (re.++ (re.* re.allchar ) (re.++  (str.to_re "=") (re.++ (re.* re.allchar )  (str.to_re "'"))))) (str.to_re sv2) ) ) ) ))
(assert (= true (not (= "" var26 )) ))
(assert (= true (= var22  var21 ) ))
(assert (= true (= (str.++ var23 "'\u{5d}" ) var22 ) ))
(assert (= true (= (str.++ var25 var26 ) var23 ) ))
(assert (= true (= (str.++ var27 "' and passwd/text\u{28}\u{29}='" ) var25 ) ))
(assert (= true (= (str.++ var29 var30 ) var27 ) ))
(assert (= true (= "/employees/employee\u{5b}loginID/text\u{28}\u{29}='" var29 ) ))
(assert (= true (not (= 0 var32 )) ))
(assert (= true (= (str.len var26 ) var32 ) ))

(check-sat)
(get-model)
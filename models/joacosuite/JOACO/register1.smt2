(set-logic QF_SLIA)

(declare-fun var1049 () String)
(declare-fun var1051 () String)
(declare-fun var1052 () String)
(declare-fun var1054 () String)
(declare-fun var1055 () String)
(declare-fun var1056 () String)
(declare-fun var1058 () String)
(declare-fun var1059 () String)
(declare-fun var1060 () String)
(declare-fun var1062 () Bool)
(declare-fun var1064 () String)
(declare-fun var1065 () Int)
(declare-fun var1069 () Int)
(declare-fun var1070 () Bool)
(declare-fun var1071 () String)
(declare-fun sv1 () String)
(declare-fun sv2 () String)

(assert (= sv1 sv2 ) )
(assert (str.in_re var1055 (re.++ (re.++ (re.++  (re.++ (re.* re.allchar ) (re.++  (str.to_re "\u{27}") (re.++ (re.+  (str.to_re "\u{20}") ) (re.++  (re.union  (str.to_re "\u{4f}")  (str.to_re "\u{6f}")) (re.++  (re.union  (str.to_re "\u{52}")  (str.to_re "\u{72}")) (re.++ (re.+  (str.to_re "\u{20}") )  (str.to_re "\u{27}"))))))) (str.to_re sv1) ) (re.++  (re.++  (str.to_re "\u{27}") (re.++ (re.* re.allchar ) (re.++  (str.to_re "\u{3d}") (re.++ (re.* re.allchar )  (str.to_re "\u{27}"))))) (str.to_re sv2) ) )  (re.++  (str.to_re "\u{27}") (re.++ (re.*  (str.to_re "\u{20}") )  (re.union  (re.++  (str.to_re "\u{5c}\u{2d}")  (str.to_re "\u{5c}\u{2d}"))  (str.to_re "\u{23}")))) ) ) )
(assert (= var1049 var1051 ) )
(assert (= var1051 (str.++ var1052 "'\u{29}" ) ) )
(assert (= var1052 (str.++ var1054 var1055 ) ) )
(assert (= var1054 (str.++ var1056 "', 'USER', '" ) ) )
(assert (= var1056 (str.++ var1058 var1059 ) ) )
(assert (= var1058 (str.++ var1060 "INSERT INTO Users \u{28}name, type, password\u{29} VALUES \u{28}'" ) ) )
(assert (not (= var1062 false )) )
(assert (= var1062 (= var1055 var1064 ) ) )
(assert (= var1065 (str.len var1055 ) ) )
(assert (not (= var1055 "" )) )
(assert (= var1069 (str.len var1059 ) ) )
(assert (not (= var1059 "" )) )
(assert (not (= var1070 false )) )
(assert (= var1070 (= var1071 "POST" ) ) )

(check-sat)

